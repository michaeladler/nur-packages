From 6402e439de03d83c7ff9dec7f5155c3979769ea8 Mon Sep 17 00:00:00 2001
From: Michael Adler <therisen06@gmail.com>
Date: Thu, 29 Apr 2021 09:57:19 +0200
Subject: [PATCH 8/8] Cool autostart

Allow dwm to execute commands from autostart array in your config.h
file. And when you exit dwm all processes from autostart array will be
killed.

https://dwm.suckless.org/patches/cool_autostart/
Signed-off-by: Michael Adler <therisen06@gmail.com>
Signed-off-by: Michael Adler <therisen06@gmail.com>
---
 config.h |  3 +++
 dwm.c    | 57 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 59 insertions(+), 1 deletion(-)

diff --git a/config.h b/config.h
index 64be90c..4ef1154 100644
--- a/config.h
+++ b/config.h
@@ -28,6 +28,9 @@ static char *colors[][3] = {
        [SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
 };
 
+/* Commands from array are executed using execvp(). So if you need to execute shell command you need to prefix it with "sh", "-c" (change sh to any shell you like). */
+static const char *const autostart[] = { NULL };
+
 static const char ptagf[] = "[%s %s]";	/* format of a tag label */
 static const char etagf[] = "[%s]";	/* format of an empty tag */
 static const int lcaselbl = 0;		/* 1 means make tag label lowercase */
diff --git a/dwm.c b/dwm.c
index 1b31dc1..944be18 100644
--- a/dwm.c
+++ b/dwm.c
@@ -294,6 +294,7 @@ static Client *termforwin(const Client *c);
 static pid_t winpid(Window w);
 
 static void cyclelayout(const Arg *arg);
+static void autostart_exec(void);
 
 
 /* variables */
@@ -353,6 +354,34 @@ struct Pertag {
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
+/* dwm will keep pid's of processes from autostart array and kill them at quit */
+static pid_t *autostart_pids;
+static size_t autostart_len;
+
+/* execute command from autostart array */
+static void
+autostart_exec() {
+	const char *const *p;
+	size_t i = 0;
+
+	/* count entries */
+	for (p = autostart; *p; autostart_len++, p++)
+		while (*++p);
+
+	autostart_pids = malloc(autostart_len * sizeof(pid_t));
+	for (p = autostart; *p; i++, p++) {
+		if ((autostart_pids[i] = fork()) == 0) {
+			setsid();
+			execvp(*p, (char *const *)p);
+			fprintf(stderr, "dwm: execvp %s\n", *p);
+			perror(" failed");
+			_exit(EXIT_FAILURE);
+		}
+		/* skip arguments */
+		while (*++p);
+	}
+}
+
 /* function implementations */
 void
 applyrules(Client *c)
@@ -1543,6 +1572,15 @@ void
 quit(const Arg *arg)
 {
 	if(arg->i) restart = 1;
+
+	/* kill child processes */
+	for (size_t i = 0; i < autostart_len; i++) {
+		if (0 < autostart_pids[i]) {
+			kill(autostart_pids[i], SIGTERM);
+			waitpid(autostart_pids[i], NULL, 0);
+		}
+	}
+
 	running = 0;
 }
 
@@ -1968,9 +2006,25 @@ showhide(Client *c)
 void
 sigchld(int unused)
 {
+	pid_t pid;
+
 	if (signal(SIGCHLD, sigchld) == SIG_ERR)
 		die("can't install SIGCHLD handler:");
-	while (0 < waitpid(-1, NULL, WNOHANG));
+	while (0 < (pid = waitpid(-1, NULL, WNOHANG))) {
+		pid_t *p, *lim;
+
+		if (!(p = autostart_pids))
+			continue;
+		lim = &p[autostart_len];
+
+		for (; p < lim; p++) {
+			if (*p == pid) {
+				*p = -1;
+				break;
+			}
+		}
+
+	}
 }
 
 void
@@ -2790,6 +2844,7 @@ main(int argc, char *argv[])
 	if (!(xcon = XGetXCBConnection(dpy)))
 		die("dwm: cannot get xcb connection\n");
 	checkotherwm();
+	autostart_exec();
 	XrmInitialize();
 	load_xresources();
 	setup();
-- 
2.31.1

